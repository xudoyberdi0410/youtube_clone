#!/usr/bin/env node

import fs from 'fs';
import path from 'path';

interface EndpointTest {
  endpoint: string;
  method: string;
  description: string;
  parameters: {
    path?: Record<string, any>;
    query?: Record<string, any>;
    body?: any;
    files?: Record<string, string>;
  };
  requiresAuth: boolean;
  responseWithAuth?: any;
  responseWithoutAuth?: any;
  actualInputs?: string[];
  actualOutputs?: any;
  status: 'success' | 'error' | 'auth_required';
  errorMessage?: string;
}

interface APITestReport {
  timestamp: string;
  baseUrl: string;
  totalEndpoints: number;
  testedEndpoints: number;
  authToken?: string;
  endpoints: EndpointTest[];
  summary: {
    publicEndpoints: number;
    authRequiredEndpoints: number;
    workingEndpoints: number;
    errorEndpoints: number;
  };
}

class SimpleAPITester {
  private baseUrl: string;
  private spec: any = null;
  private authToken: string | null = null;
  private testResults: APITestReport;
  private testImagePath: string;
  private testVideoPath: string;

  constructor(baseUrl: string) {
    this.baseUrl = baseUrl.endsWith('/') ? baseUrl : baseUrl + '/';
    this.testImagePath = path.join(process.cwd(), 'scripts', 'test-files', 'test-image.png');
    this.testVideoPath = path.join(process.cwd(), 'scripts', 'test-files', 'test-video.mp4');
    
    this.testResults = {
      timestamp: new Date().toISOString(),
      baseUrl: this.baseUrl,
      totalEndpoints: 0,
      testedEndpoints: 0,
      endpoints: [],
      summary: {
        publicEndpoints: 0,
        authRequiredEndpoints: 0,
        workingEndpoints: 0,
        errorEndpoints: 0
      }
    };
  }

  async loadOpenAPISpec(): Promise<void> {
    console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é...');
    
    try {
      // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é —Å FastAPI docs
      const docsUrl = 'https://youtube-jfmi.onrender.com/fastapi/loyiha/youtube/clone';
      console.log(`üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –∏–∑: ${docsUrl}`);
      
      const response = await fetch(docsUrl);
      const text = await response.text();
      
      // –ò—â–µ–º JSON spec –≤ HTML —Å—Ç—Ä–∞–Ω–∏—Ü–µ
      const jsonMatch = text.match(/\{"openapi":"3\.1\.0".*?\}\}$/);
      if (jsonMatch) {
        this.spec = JSON.parse(jsonMatch[0]);
        console.log(`‚úÖ –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${this.spec.info?.title} v${this.spec.info?.version}`);
        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${Object.keys(this.spec.paths || {}).length} endpoint'–æ–≤`);
      } else {
        console.log('‚ö†Ô∏è OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ HTML, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é...');
        this.spec = await this.createBasicSpec();
      }

      this.testResults.totalEndpoints = Object.keys(this.spec.paths || {}).length;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
      throw error;
    }
  }

  async createBasicSpec(): Promise<any> {
    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ endpoint'–∞–º–∏
    return {
      paths: {
        "/user/get_users": { get: { summary: "–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" } },
        "/user/post_user": { post: { summary: "–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" } },
        "/user/me": { get: { summary: "–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" } },
        "/login/token": { post: { summary: "–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏" } },
        "/video/get_videos": { get: { summary: "–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ" } },
        "/video/post_video": { post: { summary: "–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ" } },
        "/video/{video_id}": { 
          get: { summary: "–ü–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ –ø–æ ID" },
          put: { summary: "–û–±–Ω–æ–≤–∏—Ç—å –≤–∏–¥–µ–æ" },
          delete: { summary: "–£–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ" }
        },
        "/channel/get_channels": { get: { summary: "–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤" } },
        "/channel/post_channel": { post: { summary: "–°–æ–∑–¥–∞—Ç—å –∫–∞–Ω–∞–ª" } },
        "/channel/{channel_id}": { 
          get: { summary: "–ü–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª –ø–æ ID" },
          put: { summary: "–û–±–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª" },
          delete: { summary: "–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª" }
        }
      }
    };
  }

  async authenticateUser(): Promise<void> {
    console.log('üîê –ü–æ–ø—ã—Ç–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
    
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const testUser = {
        username: `test_user_${Date.now()}`,
        email: `test${Date.now()}@example.com`,
        password: 'TestPassword123!'
      };

      console.log('üë§ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      const registerResponse = await fetch(`${this.baseUrl}user/post_user`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(testUser)
      });

      if (registerResponse.ok || registerResponse.status === 409) {
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        
        // –ü—Ä–æ–±—É–µ–º –≤–æ–π—Ç–∏
        console.log('üîë –í—Ö–æ–¥–∏–º –≤ —Å–∏—Å—Ç–µ–º—É...');
        const formData = new URLSearchParams();
        formData.append('username', testUser.email);
        formData.append('password', testUser.password);

        const loginResponse = await fetch(`${this.baseUrl}login/token`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
          body: formData
        });

        if (loginResponse.ok) {
          const tokenData = await loginResponse.json();
          this.authToken = tokenData.access_token;
          this.testResults.authToken = '–ü–û–õ–£–ß–ï–ù';
          console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
        } else {
          console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω');
        }
      } else {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error instanceof Error ? error.message : 'Unknown error');
    }
  }

  async testEndpoint(path: string, method: string, operation: any): Promise<EndpointTest> {
    console.log(`\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º ${method.toUpperCase()} ${path}`);
    
    const test: EndpointTest = {
      endpoint: path,
      method: method.toUpperCase(),
      description: operation.summary || operation.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è',
      parameters: {},
      requiresAuth: false,
      status: 'success'
    };

    // –ó–∞–º–µ–Ω—è–µ–º path –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    let testPath = path;
    if (path.includes('{')) {
      testPath = path.replace(/{video_id}/g, '1')
                    .replace(/{channel_id}/g, '1')
                    .replace(/{user_id}/g, '1')
                    .replace(/{id}/g, '1');
    }

    try {
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      console.log('  üìù –¢–µ—Å—Ç –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
      const responseWithoutAuth = await this.makeRequest(testPath, method, null);
      test.responseWithoutAuth = {
        status: responseWithoutAuth.status,
        data: responseWithoutAuth.data,
        success: responseWithoutAuth.status < 400
      };

      // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ 401, –∑–Ω–∞—á–∏—Ç —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      if (responseWithoutAuth.status === 401) {
        test.requiresAuth = true;
        console.log('  üîí –¢—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é');
      }

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω
      if (this.authToken) {
        console.log('  üîê –¢–µ—Å—Ç —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π...');
        const responseWithAuth = await this.makeRequest(testPath, method, this.authToken);
        test.responseWithAuth = {
          status: responseWithAuth.status,
          data: responseWithAuth.data,
          success: responseWithAuth.status < 400
        };

        // –ï—Å–ª–∏ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ 401, –∞ —Å —Ç–æ–∫–µ–Ω–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç - –∑–Ω–∞—á–∏—Ç —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        if (test.responseWithoutAuth.status === 401 && responseWithAuth.status !== 401) {
          test.requiresAuth = true;
        }
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      test.actualInputs = this.determineInputs(path, method);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
      const workingResponse = test.responseWithAuth?.success ? test.responseWithAuth : test.responseWithoutAuth;
      if (workingResponse?.success) {
        test.actualOutputs = workingResponse.data;
        test.status = 'success';
      } else if (test.responseWithoutAuth.status === 401) {
        test.status = 'auth_required';
      } else {
        test.status = 'error';
        test.errorMessage = workingResponse?.data?.detail || '–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞';
      }

    } catch (error) {
      test.status = 'error';
      test.errorMessage = error instanceof Error ? error.message : '–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞';
      console.log(`  ‚ùå –û—à–∏–±–∫–∞: ${test.errorMessage}`);
    }

    return test;
  }

  async makeRequest(path: string, method: string, authToken: string | null): Promise<{status: number, data: any}> {
    const url = `${this.baseUrl}${path.startsWith('/') ? path.slice(1) : path}`;
    
    const headers: Record<string, string> = {
      'Accept': 'application/json'
    };

    if (authToken) {
      headers['Authorization'] = `Bearer ${authToken}`;
      console.log(`    üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω: ${authToken.slice(0, 20)}...`);
    } else {
      console.log(`    üåê –ó–∞–ø—Ä–æ—Å –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏`);
    }

    const options: RequestInit = {
      method: method.toUpperCase(),
      headers
    };

    // –î–ª—è POST/PUT –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (['POST', 'PUT', 'PATCH'].includes(method.toUpperCase())) {
      const testData = this.generateTestData(path, method);
      
      if (testData.isFile) {
        // –î–ª—è —Ñ–∞–π–ª–æ–≤—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
        const formData = new FormData();
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
        if (path.includes('video') || path.includes('shorts')) {
          if (fs.existsSync(this.testVideoPath)) {
            const videoBuffer = fs.readFileSync(this.testVideoPath);
            const videoBlob = new Blob([videoBuffer], { type: 'video/mp4' });
            
            // –†–∞–∑–Ω—ã–µ endpoint'—ã –æ–∂–∏–¥–∞—é—Ç —Ä–∞–∑–Ω—ã–µ –∏–º–µ–Ω–∞ –ø–æ–ª–µ–π
            if (path.includes('shorts')) {
              formData.append('video', videoBlob, 'test-video.mp4');
            } else {
              formData.append('vidyo', videoBlob, 'test-video.mp4'); // –≤–∏–¥–µ–æ endpoint –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 'vidyo'
            }
          }
        } else if (path.includes('image') || path.includes('profile') || path.includes('banner')) {
          if (fs.existsSync(this.testImagePath)) {
            const imageBuffer = fs.readFileSync(this.testImagePath);
            const imageBlob = new Blob([imageBuffer], { type: 'image/png' });
            formData.append('image', imageBlob, 'test-image.png');
          }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è video upload
        if (path.includes('/video/post_video')) {
          formData.append('title', testData.data.title);
          formData.append('description', testData.data.description);
          formData.append('category', testData.data.category);
        }

        options.body = formData;
        // –ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Content-Type –¥–ª—è FormData - –±—Ä–∞—É–∑–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å boundary
      } else {
        // –î–ª—è JSON –¥–∞–Ω–Ω—ã—Ö
        if (path.includes('/login/token')) {
          // –î–ª—è login endpoint –∏—Å–ø–æ–ª—å–∑—É–µ–º form-urlencoded
          headers['Content-Type'] = 'application/x-www-form-urlencoded';
          const formData = new URLSearchParams();
          Object.entries(testData.data).forEach(([key, value]) => {
            formData.append(key, String(value));
          });
          options.body = formData;
        } else {
          // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö endpoint'–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º JSON
          headers['Content-Type'] = 'application/json';
          options.body = JSON.stringify(testData.data);
        }
      }
    }

    try {
      const response = await fetch(url, options);
      
      let data;
      const contentType = response.headers.get('content-type');
      
      try {
        if (contentType && contentType.includes('application/json')) {
          data = await response.json();
        } else {
          data = await response.text();
        }
      } catch {
        data = await response.text();
      }

      return { status: response.status, data };
    } catch (error) {
      throw new Error(`Network error: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  generateTestData(path: string, method: string): {data: any, isFile: boolean} {
    const isFile = path.includes('video') || path.includes('image') || path.includes('shorts') ||
                   path.includes('profile') || path.includes('banner') || path.includes('upload');

    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    if (path.includes('/user/post_user')) {
      return {
        data: {
          username: `testuser${Date.now()}`,
          email: `test${Date.now()}@example.com`,
          password: 'TestPassword123!'
        },
        isFile: false
      };
    }

    if (path.includes('/user/post_image') || path.includes('/user/put_image')) {
      return {
        data: {},
        isFile: true
      };
    }

    // –ö–∞–Ω–∞–ª—ã
    if (path.includes('/channel/post_channel')) {
      return {
        data: {
          name: `Test Channel ${Date.now()}`,
          description: 'Test channel description'
        },
        isFile: false
      };
    }

    if (path.includes('/channel/post_profile_image') || path.includes('/channel/put_profile_image')) {
      return { data: {}, isFile: true };
    }

    if (path.includes('/channel/post_banner_image') || path.includes('/channel/put_banner_image')) {
      return { data: {}, isFile: true };
    }

    // –í–∏–¥–µ–æ
    if (path.includes('/video/post_video')) {
      return {
        data: {
          title: `Test Video ${Date.now()}`,
          description: 'Test video description',
          category: 'Texnologiya'
        },
        isFile: true
      };
    }

    if (path.includes('/video/put_video')) {
      return {
        data: {
          title: `Updated Video ${Date.now()}`,
          description: 'Updated video description',
          category: 'Ta\'lim'
        },
        isFile: false
      };
    }

    // Shorts
    if (path.includes('/shorts/post_shorts')) {
      return {
        data: {},
        isFile: true
      };
    }

    // –ü–æ–¥–ø–∏—Å–∫–∏
    if (path.includes('/subscription/post_subscription')) {
      return {
        data: { channel_id: 1 },
        isFile: false
      };
    }

    // –õ–∞–π–∫–∏
    if (path.includes('/like/post_like')) {
      return {
        data: { 
          video_id: 1,
          is_like: true
        },
        isFile: false
      };
    }

    // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    if (path.includes('/comment/post_comment')) {
      return {
        data: {
          video_id: 1,
          comment: 'Test comment'
        },
        isFile: false
      };
    }

    // –ò—Å—Ç–æ—Ä–∏—è
    if (path.includes('/history/post_histor')) {
      return {
        data: { video_id: 1 },
        isFile: false
      };
    }

    // –ü–ª–µ–π–ª–∏—Å—Ç—ã
    if (path.includes('/playlist/post_playlist')) {
      return {
        data: {
          name: `Test Playlist ${Date.now()}`,
          is_personal: true
        },
        isFile: false
      };
    }

    if (path.includes('/playlist_video')) {
      return {
        data: {
          playlist_id: 1,
          video_id: 1
        },
        isFile: false
      };
    }

    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    if (path.includes('/login/token')) {
      return {
        data: {
          username: 'test@example.com',
          password: 'testpass123'
        },
        isFile: false
      };
    }

    if (path.includes('/login/refresh_token')) {
      return {
        data: {
          refresh_token: 'fake_refresh_token'
        },
        isFile: false
      };
    }

    return {
      data: {
        name: 'Test Data',
        description: 'Test description'
      },
      isFile: false
    };
  }

  determineInputs(path: string, method: string): string[] {
    const inputs: string[] = [];

    // Path –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if (path.includes('{')) {
      const pathParams = path.match(/{([^}]+)}/g);
      if (pathParams) {
        inputs.push(...pathParams.map(p => `Path: ${p}`));
      }
    }

    // Query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
    if (path.includes('/video/get_video')) {
      inputs.push('Query: ident (ID –≤–∏–¥–µ–æ, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)', 'Query: category (–∫–∞—Ç–µ–≥–æ—Ä–∏—è, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)');
    } else if (path.includes('/channel/get_channel')) {
      inputs.push('Query: name (–∏–º—è –∫–∞–Ω–∞–ª–∞, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)');
    } else if (path.includes('/subscription/delete_subscription')) {
      inputs.push('Query: ident (ID –ø–æ–¥–ø–∏—Å–∫–∏, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)');
    } else if (path.includes('/video/delete_video')) {
      inputs.push('Query: video_id (ID –≤–∏–¥–µ–æ, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)');
    } else if (path.includes('/comment/delete_comment')) {
      inputs.push('Query: comment_id (ID –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)');
    } else if (path.includes('/history/delete_history')) {
      inputs.push('Query: ident (ID –∏—Å—Ç–æ—Ä–∏–∏, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)');
    } else if (path.includes('/playlist/delete_playlist')) {
      inputs.push('Query: ident (ID –ø–ª–µ–π–ª–∏—Å—Ç–∞, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)');
    } else if (path.includes('/playlist_video/delete_playlist_video')) {
      inputs.push('Query: ident (ID –≤–∏–¥–µ–æ –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)');
    } else if (path.includes('/shorts/delete_shorts')) {
      inputs.push('Query: ident (ID shorts, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)');
    } else if (path.includes('/like/delete_like')) {
      inputs.push('Query: ident (ID –ª–∞–π–∫–∞, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)');
    }

    // Body –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è POST/PUT
    if (['POST', 'PUT', 'PATCH'].includes(method.toUpperCase())) {
      if (path.includes('/user/post_user') || path.includes('/user/put_user')) {
        inputs.push('Body: username (—Å—Ç—Ä–æ–∫–∞)', 'Body: email (email)', 'Body: password (—Å—Ç—Ä–æ–∫–∞)');
      } else if (path.includes('/user/post_image') || path.includes('/user/put_image')) {
        inputs.push('File: image (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)');
      } else if (path.includes('/channel/post_channel') || path.includes('/channel/put_channel')) {
        inputs.push('Body: name (—Å—Ç—Ä–æ–∫–∞)', 'Body: description (—Å—Ç—Ä–æ–∫–∞)');
      } else if (path.includes('/channel') && path.includes('image')) {
        inputs.push('File: image (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)');
      } else if (path.includes('/video/post_video')) {
        inputs.push('File: vidyo (–≤–∏–¥–µ–æ—Ñ–∞–π–ª, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)', 'Body: title (—Å—Ç—Ä–æ–∫–∞)', 'Body: description (—Å—Ç—Ä–æ–∫–∞)', 'Body: category (enum)');
      } else if (path.includes('/video/put_video')) {
        inputs.push('Body: title (—Å—Ç—Ä–æ–∫–∞)', 'Body: description (—Å—Ç—Ä–æ–∫–∞)', 'Body: category (enum)');
      } else if (path.includes('/shorts/post_shorts')) {
        inputs.push('File: video (–≤–∏–¥–µ–æ—Ñ–∞–π–ª, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)');
      } else if (path.includes('/subscription/post_subscription')) {
        inputs.push('Body: channel_id (—á–∏—Å–ª–æ)');
      } else if (path.includes('/like/post_like')) {
        inputs.push('Body: video_id (—á–∏—Å–ª–æ)', 'Body: is_like (boolean)');
      } else if (path.includes('/comment/post_comment') || path.includes('/comment/put_comment')) {
        inputs.push('Body: video_id (—á–∏—Å–ª–æ)', 'Body: comment (—Å—Ç—Ä–æ–∫–∞)');
      } else if (path.includes('/history/post_histor')) {
        inputs.push('Body: video_id (—á–∏—Å–ª–æ)');
      } else if (path.includes('/playlist/post_playlist') || path.includes('/playlist/put_playlist')) {
        inputs.push('Body: name (—Å—Ç—Ä–æ–∫–∞)', 'Body: is_personal (boolean)');
      } else if (path.includes('/playlist_video')) {
        inputs.push('Body: playlist_id (—á–∏—Å–ª–æ)', 'Body: video_id (—á–∏—Å–ª–æ)');
      } else if (path.includes('/login/token')) {
        inputs.push('Body: username (—Å—Ç—Ä–æ–∫–∞)', 'Body: password (—Å—Ç—Ä–æ–∫–∞)', 'Body: grant_type (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)');
      } else if (path.includes('/login/refresh_token')) {
        inputs.push('Body: refresh_token (—Å—Ç—Ä–æ–∫–∞)');
      } else {
        inputs.push('Body: JSON data');
      }
    }

    if (inputs.length === 0) {
      inputs.push('–ù–µ—Ç –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤');
    }

    return inputs;
  }

  async runCompleteTest(): Promise<void> {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API...\n');

    try {
      await this.loadOpenAPISpec();
      await this.authenticateUser();

      const endpoints = this.getEndpointsFromSpec();
      
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º DELETE –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
      const deleteEndpoints = endpoints.filter(e => e.method === 'delete');
      const deleteUserEndpoints = endpoints.filter(e => e.method === 'delete' && e.path.includes('/user/delete_user'));
      const otherDeleteEndpoints = endpoints.filter(e => e.method === 'delete' && !e.path.includes('/user/delete_user'));
      const nonDeleteCount = endpoints.length - deleteEndpoints.length;
      const otherDeleteStartIndex = nonDeleteCount;
      const deleteUserStartIndex = nonDeleteCount + otherDeleteEndpoints.length;

      console.log(`üìã –ë—É–¥–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ ${endpoints.length} endpoint'–æ–≤ (${nonDeleteCount} –æ–±—ã—á–Ω—ã—Ö + ${otherDeleteEndpoints.length} DELETE + ${deleteUserEndpoints.length} DELETE user)\n`);

      for (let i = 0; i < endpoints.length; i++) {
        const { path, method, operation } = endpoints[i];
        
        // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ DELETE –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
        if (method === 'delete' && i === otherDeleteStartIndex && otherDeleteEndpoints.length > 0) {
          console.log('\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DELETE –æ–ø–µ—Ä–∞—Ü–∏–π');
          console.log('   –≠—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –º–æ–≥—É—Ç —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ\n');
        }
        
        // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (method === 'delete' && i === deleteUserStartIndex && deleteUserEndpoints.length > 0) {
          console.log('\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –¢–µ—Å—Ç–∏—Ä—É–µ–º DELETE /user/delete_user');
          console.log('   –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è —É–¥–∞–ª–∏—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–¥–µ–ª–∞–µ—Ç —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º!\n');
        }
        
        const test = await this.testEndpoint(path, method, operation);
        this.testResults.endpoints.push(test);
        this.testResults.testedEndpoints++;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if (test.requiresAuth) {
          this.testResults.summary.authRequiredEndpoints++;
        } else {
          this.testResults.summary.publicEndpoints++;
        }

        if (test.status === 'success') {
          this.testResults.summary.workingEndpoints++;
        } else {
          this.testResults.summary.errorEndpoints++;
        }

        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 300));
      }

      await this.saveResults();
      this.printSummary();

    } catch (error) {
      console.error('üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      throw error;
    }
  }

  getEndpointsFromSpec(): Array<{path: string, method: string, operation: any}> {
    const endpoints: Array<{path: string, method: string, operation: any}> = [];
    
    // –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ endpoint'—ã
    const allEndpoints: Array<{path: string, method: string, operation: any}> = [];
    
    for (const [path, pathItem] of Object.entries(this.spec.paths)) {
      for (const [method, operation] of Object.entries(pathItem as any)) {
        if (['get', 'post', 'put', 'patch', 'delete'].includes(method)) {
          allEndpoints.push({ path, method, operation });
        }
      }
    }

    // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ DELETE –∏ –æ—Å—Ç–∞–ª—å–Ω—ã–µ
    const deleteEndpoints = allEndpoints.filter(e => e.method === 'delete');
    const otherEndpoints = allEndpoints.filter(e => e.method !== 'delete');

    // –û—Ç–¥–µ–ª—è–µ–º DELETE /user/delete_user –æ—Ç –æ—Å—Ç–∞–ª—å–Ω—ã—Ö DELETE –æ–ø–µ—Ä–∞—Ü–∏–π
    const deleteUserEndpoint = deleteEndpoints.filter(e => e.path.includes('/user/delete_user'));
    const otherDeleteEndpoints = deleteEndpoints.filter(e => !e.path.includes('/user/delete_user'));

    // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –Ω–µ-DELETE –æ–ø–µ—Ä–∞—Ü–∏–∏
    endpoints.push(...otherEndpoints);
    
    // –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ DELETE –æ–ø–µ—Ä–∞—Ü–∏–∏
    endpoints.push(...otherDeleteEndpoints);
    
    // –í —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤–ª—è–µ–º DELETE /user/delete_user (–æ–Ω —Å–¥–µ–ª–∞–µ—Ç —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º)
    endpoints.push(...deleteUserEndpoint);

    return endpoints;
  }

  async saveResults(): Promise<void> {
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const outputDir = path.join(process.cwd(), 'api-analysis');
    
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }

    // JSON –æ—Ç—á–µ—Ç
    const jsonPath = path.join(outputDir, `simple-api-test-${timestamp}.json`);
    fs.writeFileSync(jsonPath, JSON.stringify(this.testResults, null, 2));

    // Markdown –æ—Ç—á–µ—Ç
    const markdownPath = path.join(outputDir, `api-test-report-${timestamp}.md`);
    const report = this.generateMarkdownReport();
    fs.writeFileSync(markdownPath, report);

    console.log(`\nüìÑ –û—Ç—á–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:`);
    console.log(`  - JSON: ${jsonPath}`);
    console.log(`  - Markdown: ${markdownPath}`);
  }

  generateMarkdownReport(): string {
    const results = this.testResults;
    
    let report = `# –û—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API\n\n`;
    report += `**–î–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:** ${results.timestamp}\n`;
    report += `**API URL:** ${results.baseUrl}\n`;
    report += `**–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:** ${results.authToken ? '–ü–æ–ª—É—á–µ–Ω–∞' : '–ù–µ –ø–æ–ª—É—á–µ–Ω–∞'}\n\n`;

    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    report += `## üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n`;
    report += `- **–í—Å–µ–≥–æ endpoint'–æ–≤:** ${results.totalEndpoints}\n`;
    report += `- **–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ:** ${results.testedEndpoints}\n`;
    report += `- **–ü—É–±–ª–∏—á–Ω—ã—Ö (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏):** ${results.summary.publicEndpoints}\n`;
    report += `- **–¢—Ä–µ–±—É—é—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é:** ${results.summary.authRequiredEndpoints}\n`;
    report += `- **–†–∞–±–æ—Ç–∞—é—â–∏—Ö:** ${results.summary.workingEndpoints}\n`;
    report += `- **–° –æ—à–∏–±–∫–∞–º–∏:** ${results.summary.errorEndpoints}\n\n`;

    // –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ endpoint'—ã –≤ –Ω–∞—á–∞–ª–µ –æ—Ç—á–µ—Ç–∞
    const errorEndpoints = results.endpoints.filter(e => e.status === 'error');
    if (errorEndpoints.length > 0) {
      report += `## üö® –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ endpoint'—ã\n\n`;
      report += `–ù–∞–π–¥–µ–Ω–æ ${errorEndpoints.length} endpoint'–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏:\n\n`;
      
      errorEndpoints.forEach(endpoint => {
        const authLabel = endpoint.requiresAuth ? 'üîí' : 'üåê';
        report += `- ${authLabel} **${endpoint.method} ${endpoint.endpoint}** - ${endpoint.description}\n`;
        
        if (endpoint.errorMessage) {
          report += `  - –û—à–∏–±–∫–∞: ${endpoint.errorMessage}\n`;
        }
        
        if (endpoint.responseWithoutAuth && !endpoint.responseWithoutAuth.success) {
          report += `  - –ë–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${endpoint.responseWithoutAuth.data?.detail || endpoint.responseWithoutAuth.data?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}\n`;
        }
        
        if (endpoint.responseWithAuth && !endpoint.responseWithAuth.success) {
          report += `  - –° –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π: ${endpoint.responseWithAuth.data?.detail || endpoint.responseWithAuth.data?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}\n`;
        }
        
        report += `\n`;
      });
      report += `\n`;
    }

    // –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ endpoint'–∞–º
    report += `## üìã –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ endpoint'–æ–≤\n\n`;

    for (const endpoint of results.endpoints) {
      report += `### ${endpoint.method} ${endpoint.endpoint}\n\n`;
      report += `**–û–ø–∏—Å–∞–Ω–∏–µ:** ${endpoint.description}\n\n`;
      
      // –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      report += `**–í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:**\n`;
      if (endpoint.actualInputs && endpoint.actualInputs.length > 0) {
        endpoint.actualInputs.forEach(input => {
          report += `- ${input}\n`;
        });
      } else {
        report += `- –ù–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n`;
      }
      report += `\n`;

      // –¢—Ä–µ–±—É–µ—Ç –ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
      report += `**–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:** ${endpoint.requiresAuth ? 'üîí –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞' : 'üåê –ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'}\n\n`;

      // –û—Ç–≤–µ—Ç—ã
      if (endpoint.responseWithoutAuth) {
        report += `**–û—Ç–≤–µ—Ç –ë–ï–ó –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:**\n`;
        report += `- –°—Ç–∞—Ç—É—Å: ${endpoint.responseWithoutAuth.status}\n`;
        if (endpoint.responseWithoutAuth.success) {
          report += `- –†–µ–∑—É–ª—å—Ç–∞—Ç: ‚úÖ –£—Å–ø–µ—Ö\n`;
          if (typeof endpoint.responseWithoutAuth.data === 'object') {
            const dataStr = JSON.stringify(endpoint.responseWithoutAuth.data, null, 2);
            if (dataStr.length > 200) {
              report += `- –î–∞–Ω–Ω—ã–µ: \`\`\`json\n${dataStr.slice(0, 500)}...\n\`\`\`\n`;
            } else {
              report += `- –î–∞–Ω–Ω—ã–µ: \`\`\`json\n${dataStr}\n\`\`\`\n`;
            }
          }
        } else {
          report += `- –†–µ–∑—É–ª—å—Ç–∞—Ç: ‚ùå –û—à–∏–±–∫–∞\n`;
          report += `- –û—à–∏–±–∫–∞: ${endpoint.responseWithoutAuth.data?.detail || endpoint.responseWithoutAuth.data?.message || '–ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π'}\n`;
        }
        report += `\n`;
      }

      if (endpoint.responseWithAuth) {
        report += `**–û—Ç–≤–µ—Ç –° –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π:**\n`;
        report += `- –°—Ç–∞—Ç—É—Å: ${endpoint.responseWithAuth.status}\n`;
        if (endpoint.responseWithAuth.success) {
          report += `- –†–µ–∑—É–ª—å—Ç–∞—Ç: ‚úÖ –£—Å–ø–µ—Ö\n`;
          if (typeof endpoint.responseWithAuth.data === 'object') {
            const dataStr = JSON.stringify(endpoint.responseWithAuth.data, null, 2);
            if (dataStr.length > 200) {
              report += `- –î–∞–Ω–Ω—ã–µ: \`\`\`json\n${dataStr.slice(0, 500)}...\n\`\`\`\n`;
            } else {
              report += `- –î–∞–Ω–Ω—ã–µ: \`\`\`json\n${dataStr}\n\`\`\`\n`;
            }
          }
        } else {
          report += `- –†–µ–∑—É–ª—å—Ç–∞—Ç: ‚ùå –û—à–∏–±–∫–∞\n`;
          report += `- –û—à–∏–±–∫–∞: ${endpoint.responseWithAuth.data?.detail || endpoint.responseWithAuth.data?.message || '–ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π'}\n`;
        }
        report += `\n`;
      }

      // –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
      let statusIcon = '';
      switch (endpoint.status) {
        case 'success': statusIcon = '‚úÖ'; break;
        case 'auth_required': statusIcon = 'üîí'; break;
        case 'error': statusIcon = '‚ùå'; break;
      }
      
      report += `**–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å:** ${statusIcon} ${endpoint.status.toUpperCase()}\n`;
      if (endpoint.errorMessage) {
        report += `**–û—à–∏–±–∫–∞:** ${endpoint.errorMessage}\n`;
      }
      
      report += `\n---\n\n`;
    }

    // –í—ã–≤–æ–¥—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    report += `## üéØ –í—ã–≤–æ–¥—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n`;
    
    // –£—Å–ø–µ—à–Ω—ã–µ endpoint'—ã
    const successfulEndpoints = results.endpoints.filter(e => e.status === 'success');
    if (successfulEndpoints.length > 0) {
      report += `‚úÖ **–†–∞–±–æ—á–∏–µ endpoint'—ã (${successfulEndpoints.length}):**\n`;
      successfulEndpoints.forEach(endpoint => {
        const authLabel = endpoint.requiresAuth ? 'üîí' : 'üåê';
        report += `- ${authLabel} ${endpoint.method} ${endpoint.endpoint} - ${endpoint.description}\n`;
      });
      report += `\n`;
    }
    
    if (results.summary.errorEndpoints > 0) {
      report += `‚ö†Ô∏è **–ù–∞–π–¥–µ–Ω–æ ${results.summary.errorEndpoints} endpoint'–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏** - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ api-client.ts\n\n`;
    }
    
    if (results.summary.authRequiredEndpoints > 0) {
      report += `üîí **${results.summary.authRequiredEndpoints} endpoint'–æ–≤ —Ç—Ä–µ–±—É—é—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é** - —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ api-client.ts –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã\n\n`;
    }
    
    if (!results.authToken) {
      report += `‚ö†Ô∏è **–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏** - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ api-config.ts\n\n`;
    } else {
      report += `‚úÖ **–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ** - —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö\n\n`;
    }

    // –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º
    const userNotFoundErrors = results.endpoints.filter(e => 
      e.responseWithAuth?.data?.detail?.includes('User not found') || 
      e.responseWithoutAuth?.data?.detail?.includes('User not found')
    ).length;
    
    if (userNotFoundErrors > 0) {
      report += `üö® **–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞:** ${userNotFoundErrors} endpoint'–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç "User not found"\n`;
      report += `–≠—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –ª–æ–≥–∏–∫–æ–π —Å–µ—Ä–≤–µ—Ä–∞, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–ª–∏–µ–Ω—Ç–æ–º.\n\n`;
    }

    report += `### –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é api-client.ts:\n\n`;
    report += `1. –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å-–∫–æ–¥–æ–≤\n`;
    report += `2. –£–ª—É—á—à–∏—Ç—å —Ç–∏–ø–∏–∑–∞—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ endpoint'–∞\n`;
    report += `3. –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n`;
    report += `4. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤\n\n`;

    return report;
  }

  printSummary(): void {
    const results = this.testResults;
    console.log(`\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!`);
    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:`);
    console.log(`  üìã –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${results.testedEndpoints}/${results.totalEndpoints} endpoint'–æ–≤`);
    console.log(`  üåê –ü—É–±–ª–∏—á–Ω—ã—Ö: ${results.summary.publicEndpoints}`);
    console.log(`  üîí –¢—Ä–µ–±—É—é—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é: ${results.summary.authRequiredEndpoints}`);
    console.log(`  ‚úÖ –†–∞–±–æ—Ç–∞—é—Ç: ${results.summary.workingEndpoints}`);
    console.log(`  ‚ùå –û—à–∏–±–∫–∏: ${results.summary.errorEndpoints}`);
    console.log(`  üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: ${results.authToken ? '–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞' : '–ù–µ –ø–æ–ª—É—á–µ–Ω–∞'}`);
  }
}

// –ó–∞–ø—É—Å–∫
async function main() {
  const baseUrl = 'https://youtube-jfmi.onrender.com/';
  const tester = new SimpleAPITester(baseUrl);
  await tester.runCompleteTest();
}

if (require.main === module) {
  main().catch(console.error);
}

export { SimpleAPITester };
